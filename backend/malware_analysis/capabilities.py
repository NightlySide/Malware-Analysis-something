import capa.engine
import capa.main
import capa.render.result_document as rd
from capa.rules import InvalidRule, InvalidRuleSet
import os
import string

# capa does not declare a __str__ or a __repr__ for that special object, so without the following, we get
#   "<capa.engine.Result object at 0x7f17da579880>"
# in the ResultSection if we want to use the full capabilities report
capa.engine.Result.__repr__ = lambda self: (
    f"{self.__class__.__module__}.{self.__class__.__qualname__}("
    f"success={self.success}, "
    f"statement: {self.statement}, "
    f"children: {self.children}, "
    f"locations: {self.locations}"
    ")"
)

if __name__ == "__main__":
    # path = "/home/user/Downloads/d48b986d716fe5388a53ae46e743038128f9b0b79213467314fcc76715725ac3.exe"
    path = "/home/user/Documents/Malware-Analysis-something/training/samples/0a0d544567fd689b8d1a567d06444a7907dd45e42b97b089273c80d28887a2ba.elf"

    file_format = "auto"  # auto, pe, elf
    os_type = capa.main.OS_AUTO

    # load the rules
    print("Loading rules")
    try:
        rules = capa.main.get_rules(
            [
                os.path.join(
                    os.path.dirname(__file__), "third_party", "capa-rules-5.1.0"
                )
            ],
        )
        print(f"Loaded {len(rules)} rules")
    except (IOError, InvalidRule, InvalidRuleSet) as e:
        print("InvalidRuleSet: %s", str(e))

    # load the sigs
    print("Loading signatures")
    try:
        sigpaths = capa.main.get_signatures(
            os.path.join(os.path.dirname(__file__), "third_party", "capa-sigs-5.1.0")
        )
    except IOError as e:
        print(f"InvalidSignatureSet: {e}")
        exit()

    # get the extractors
    print("Building extractor")
    try:
        extractor = capa.main.get_extractor(
            path,
            file_format,  # format
            os_type,  # OS
            capa.main.BACKEND_VIV,
            sigpaths,
            should_save_workspace=True,
            disable_progress=False,
        )
    except capa.main.UnsupportedFormatError as e:
        print("UnsupportedFormatError: %s", str(e))
        exit()
    except capa.main.UnsupportedRuntimeError as e:
        print("UnsupportedRuntimeError: %s", str(e))
        exit()
    except Exception as e:
        print(f"Get extractor error: {e}")
        print(e.with_traceback())
        exit()

    # load meta
    print("Collecting metadata")
    meta = capa.main.collect_metadata([], path, file_format, os_type, [], extractor)

    # try to get capa
    print("Getting capas")
    capabilities, counts = capa.main.find_capabilities(
        rules, extractor, disable_progress=False
    )
    meta["analysis"].update(counts)
    meta["analysis"]["layout"] = capa.main.compute_layout(
        rules, extractor, capabilities
    )

    # generate rendering doc
    doc = rd.ResultDocument.from_capa(meta, rules, capabilities)

    def remove_hash_ending(rule_name):
        if (
            len(rule_name) > 33
            and rule_name[-33] == "/"
            and all(c in string.hexdigits for c in rule_name[-32:])
        ):
            return remove_hash_ending(rule_name[:-33])
        return rule_name

    capa_graph_data = list(set([remove_hash_ending(x) for x in capabilities.keys()]))
    print("==================CAPABILITIES==================")
    print(capa_graph_data)

    print("==================LIB FUNCTIONS==================")
    print(meta["analysis"]["library_functions"].values())
